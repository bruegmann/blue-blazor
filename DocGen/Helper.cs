using System.Reflection;
using Microsoft.AspNetCore.Components;
using System.Xml.Linq;
using System.Text.RegularExpressions;
using System.Text.Json;
using Microsoft.AspNetCore.Components.Web;
using System.Collections;
using System.Collections.Generic;

public class Helper
{
    public string RazorTemplate { get; set; } = "@{ /* This file is generated by DocGen. Don't make direct changes. */ }\n{imports}\n" +
        "<div class=\"docgen\">\n{content}\n{props}\n{examples}\n</div>";

    string applyRazorTemplate(string imports = "", string content = "", string props = "", string examples = "")
    {
        return RazorTemplate.Replace("{imports}", imports)
                .Replace("{content}", content)
                .Replace("{props}", props)
                .Replace("{examples}", examples);
    }

    public async Task GenerateComponentPages(string componentsPath, string storiesPath, string pagesPath, string dataPath,
        string componentNamespace, string assemblyName, string? xmlDocumentationPath = null)
    {
        var components = Directory.GetFiles(componentsPath, "*.razor").Select(Path.GetFileNameWithoutExtension);

        var componentPageUrls = new Dictionary<string, string>();

        foreach (var component in components)
        {
            var pagePath = Path.Combine(pagesPath, $"{component}.razor");

            string readMeHtml = markdownToHtml($"# {component!}");
            string parametersHtml = "";

            Type? componentType = Type.GetType($"{componentNamespace}.{component}");
            if (componentType == null)
            {
                componentType = Type.GetType($"{componentNamespace}.{component}, {assemblyName}");
            }
            if (componentType != null && xmlDocumentationPath != null)
            {
                string componentComment = getXmlDocumentationCommentForClass(xmlDocumentationPath, componentType);
                readMeHtml += markdownToHtml(componentComment);

                var parameters = getComponentParameters(componentType, xmlDocumentationPath);
                parametersHtml = componentParameterInfoToHtml(parameters);
            }

            string pageUrl = $"components/{pascalToKebabCase(component!)}";
            componentPageUrls.Add(component!, pageUrl);

            string storyPath = Path.Combine(storiesPath, component!);
            string storyImport = "";
            string storyHtml = "";
            if (Directory.Exists(storyPath))
            {
                storyImport = $"@using BlueBlazor.Docs.Stories.{component}\n";
                storyHtml = await getStoryContent(storyPath);
            }

            //string content = $"@page \"/{pageUrl}\"\n" +
            //    storyImport +
            //    $"\n{readMeHtml}\n" +
            //    $"\n{parametersHtml}\n" +
            //    $"\n{storyHtml}\n";

            string razor = applyRazorTemplate($"@page \"/{pageUrl}\"\n{storyImport}", readMeHtml, parametersHtml, storyHtml);
            await File.WriteAllTextAsync(pagePath, razor);
        }

        string pagesDataPath = Path.Combine(dataPath, "pages-data.json");
        await File.WriteAllTextAsync(pagesDataPath, JsonSerializer.Serialize(componentPageUrls));
    }

    async Task<string> getStoryContent(string storyPath)
    {
        string docsRegex = "@\\{\\s*\\/\\*docs([\\s\\S]*?)\\*\\/\\s*\\}";
        var examples = Directory.GetFiles(storyPath, "*.razor");
        string examplesHtml = "";

        foreach (var example in examples)
        {
            string exampleName = Path.GetFileNameWithoutExtension(example);
            string exampleNameReadable = pascalToReadable(exampleName);
            var code = await File.ReadAllTextAsync(example);

            DocsMeta docsMeta = new DocsMeta
            {
                Title = exampleNameReadable,
                Description = ""
            };

            // Read out meta data from the code
            Match match = Regex.Match(code, docsRegex);

            if (match.Groups.Count > 1)
            {
                try
                {
                    var s = JsonSerializer.Deserialize<DocsMeta>(match.Groups[1].Value,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    if (s != null)
                    {
                        docsMeta = s;
                        if (string.IsNullOrEmpty(docsMeta.Title))
                        {
                            docsMeta.Title = exampleNameReadable;
                        }
                    }
                    code = code.Replace(match.Value, "");
                }
                catch { }
            }

            code = code.Replace("@", "@@").Replace("<", "&lt;").Replace(">", "&gt;").Trim();

            examplesHtml += $"<h2>{docsMeta.Title}</h2>\n" +
                (docsMeta.Description != "" ? markdownToHtml(docsMeta.Description ?? "") : "");

            examplesHtml += "<div class=\"example\">\n" +
                $"    <div class=\"example-demo\">{(docsMeta.IframeUrl != null ?
                $"<iframe class=\"example-iframe\" src=\"{docsMeta.IframeUrl}\"></iframe>" +
                $"<a href=\"{docsMeta.IframeUrl}\" target=\"_blank\" rel=\"noreferrer\">" +
                $"<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" fill=\"currentColor\" class=\"bi bi-fullscreen\" viewBox=\"0 0 16 16\"><path d=\"M1.5 1a.5.5 0 0 0-.5.5v4a.5.5 0 0 1-1 0v-4A1.5 1.5 0 0 1 1.5 0h4a.5.5 0 0 1 0 1zM10 .5a.5.5 0 0 1 .5-.5h4A1.5 1.5 0 0 1 16 1.5v4a.5.5 0 0 1-1 0v-4a.5.5 0 0 0-.5-.5h-4a.5.5 0 0 1-.5-.5M.5 10a.5.5 0 0 1 .5.5v4a.5.5 0 0 0 .5.5h4a.5.5 0 0 1 0 1h-4A1.5 1.5 0 0 1 0 14.5v-4a.5.5 0 0 1 .5-.5m15 0a.5.5 0 0 1 .5.5v4a1.5 1.5 0 0 1-1.5 1.5h-4a.5.5 0 0 1 0-1h4a.5.5 0 0 0 .5-.5v-4a.5.5 0 0 1 .5-.5\" /></svg> " +
                $"Open in full window</a>" :
                $"<{exampleName} />")}</div>\n\n" +
                $"    <details class=\"example-code\">\n" +
                $"        <summary>Code</summary>\n" +
                $"        <pre><code class=\"language-razor\">{code}</code></pre>\n" +
                $"    </details>\n" +
                "</div>";
        }

        return examplesHtml;
    }

    public async Task GeneratePage(string markdownPath, string targetFilePath, string? pageSlug = "/")
    {
        var markdown = await File.ReadAllTextAsync(markdownPath);
        string html = markdownToHtml(markdown);

        string razor = applyRazorTemplate($"@page \"{pageSlug}\"", html);
        await File.WriteAllTextAsync(targetFilePath, razor);
    }

    IEnumerable<ComponentParameterInfo> getComponentParameters(Type componentType, string xmlDocumentationPath)
    {
        if (componentType == null)
        {
            throw new ArgumentNullException(nameof(componentType));
        }

        var xmlDoc = XDocument.Load(xmlDocumentationPath);
        var memberNodes = xmlDoc.Descendants("member");


        return componentType.GetProperties(BindingFlags.Public | BindingFlags.Instance)
                            .Where(prop => Attribute.IsDefined(prop, typeof(ParameterAttribute)))
                            .Select(prop => new ComponentParameterInfo
                            {
                                Name = prop.Name,
                                ParameterType = prettyTypeName(prop.PropertyType),
                                DefaultValue = getDefaultValue(prop, componentType),
                                Comment = getXmlDocumentationCommentForProp(memberNodes, prop)
                            });
    }

    object? getDefaultValue(PropertyInfo prop, Type componentType)
    {
        var instance = Activator.CreateInstance(componentType);
        var value = prop.GetValue(instance);

        if (value == null)
        {
            return "null";
        }

        Type type = value.GetType();

        // Primitives
        if (type.IsPrimitive || value is string)
        {
            return value is string ? $"\"{value}\"" : value.ToString()?.ToLower(); // true/false klein schreiben
        }

        // Nullable types
        if (Nullable.GetUnderlyingType(type) != null)
        {
            return value.ToString();
        }

        // Arrays
        if (type.IsArray)
        {
            var array = value as Array;
            if (array != null && array.Length == 0)
            {
                return $"new {type.GetElementType()?.Name}[0]";
            }
            // Hier kannst du weitere Logik hinzufügen, um Arrays zu formatieren
        }

        // EventCallbacks oder andere generische Typen
        if (type.IsGenericType)
        {
            var genericTypeDefinition = type.GetGenericTypeDefinition();
            if (genericTypeDefinition == typeof(EventCallback<>))
            {
                return "EventCallback.Empty";
            }

            // Generische Typen formatieren
            var genericArgs = string.Join(", ", type.GetGenericArguments().Select(t => t.Name));
            return $"{genericTypeDefinition.Name.Split('`')[0]}&lt;{genericArgs}&gt;";
        }

        // Für alle anderen Fälle
        return value.ToString() ?? "unknown";
    }

    string componentParameterInfoToHtml(IEnumerable<ComponentParameterInfo> parameter)
    {
        string table = "<div class=\"table-responsive\"><table class=\"table table-bordered\">";
        table += "\n    <thead><tr><th>Name</th><th>Description</th><th>Type</th><th>Default</th></tr></thead>";
        table += "\n    <tbody>";

        foreach (var param in parameter)
        {
            table += "\n        <tr>";
            table += $"<td><code>{param.Name}</code></td>";
            table += $"<td>{markdownToHtml(param.Comment ?? "")}</td>";
            table += $"<td>{param.ParameterType}</td>";
            table += $"<td>{param.DefaultValue}</td>";
            table += "</tr>";
        }

        table += "\n    </tbody>\n";
        table += "</table></div>";

        return table;
    }

    string getXmlDocumentationCommentForClass(string xmlDocumentationPath, Type classType)
    {
        var xmlDoc = XDocument.Load(xmlDocumentationPath);
        var memberNodes = xmlDoc.Descendants("member");

        var memberName = $"T:{classType.FullName}";
        var memberNode = memberNodes.FirstOrDefault(node => node.Attribute("name")?.Value == memberName);
        var comment = memberNode?.Element("summary")?.Value ?? string.Empty;

        // Jede Zeile trimmen
        var trimmedComment = string.Join("\n", comment.Split('\n').Select(line => line.Trim()));

        return trimmedComment;
    }

    string getXmlDocumentationCommentForProp(IEnumerable<XElement> memberNodes, PropertyInfo prop)
    {
        var memberName = $"P:{prop.DeclaringType?.FullName}.{prop.Name}";
        var memberNode = memberNodes.FirstOrDefault(node => node.Attribute("name")?.Value == memberName);
        return memberNode?.Element("summary")?.Value.Trim() ?? string.Empty;
    }

    string markdownToHtml(string markdown)
    {
        return $"<div class=\"md-block\">{Markdig.Markdown.ToHtml(markdown).Replace("@", "@@")}</div>";
    }

    string pascalToKebabCase(string value)
    {
        if (string.IsNullOrEmpty(value))
            return value;

        return Regex.Replace(
            value,
            "(?<!^)([A-Z][a-z]|(?<=[a-z])[A-Z0-9])",
            "-$1",
            RegexOptions.Compiled)
            .Trim()
            .ToLower();
    }

    string pascalToReadable(string value)
    {
        if (string.IsNullOrEmpty(value))
            return value;

        // Fügen Sie Leerzeichen vor Großbuchstaben ein
        string result = Regex.Replace(value, "(?<!^)([A-Z])", " $1", RegexOptions.Compiled);

        // Konvertieren Sie den ersten Buchstaben in Großbuchstaben und den Rest in Kleinbuchstaben
        return char.ToUpper(result[0]) + result.Substring(1).ToLower();
    }

    string prettyTypeName(Type type)
    {
        if (type.GetGenericArguments().Length == 0)
        {
            return type.Name;
        }
        var genericArguments = type.GetGenericArguments();
        var typeDefinition = type.Name;
        var unmangledName = typeDefinition.Substring(0, typeDefinition.IndexOf("`"));
        return unmangledName + "&lt;" + string.Join(",", genericArguments.Select(prettyTypeName)) + "&gt;";
    }
}

public class ComponentParameterInfo
{
    public string? Name { get; set; }
    public string? ParameterType { get; set; }
    public object? DefaultValue { get; set; }
    public string? Comment { get; set; }
}

public class DocsMeta
{
    public string? Title { get; set; }
    public string? Description { get; set; }
    public string? IframeUrl { get; set; }
}