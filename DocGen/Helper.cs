using System.Reflection;
using Microsoft.AspNetCore.Components;
using System.Xml.Linq;
using System.Text.RegularExpressions;
using System.Text.Json;

public class Helper
{
    public string RazorTemplate { get; set; } = "@{ /* This file is generated by DocGen. Don't make direct changes. */ }\n<div class=\"docgen\">\n{0}\n</div>";

    public async Task GenerateStoryPages(string storiesPath, string pagesPath, string componentNamespace, string assemblyName, string? xmlDocumentationPath = null)
    {
        var stories = Directory.GetDirectories(storiesPath).Select(Path.GetFileName);

        foreach (var story in stories)
        {
            var pagePath = Path.Combine(pagesPath, $"{story!}.razor");
            var readMePath = Path.Combine(storiesPath, story!, "README.md");
            var examplesPath = Path.Combine(storiesPath, story!, "Examples");

            string readMeHtml = "";
            string parametersHtml = "";
            string examplesHtml = "";

            string docsRegex = "@\\{\\s*\\/\\*docs([\\s\\S]*?)\\*\\/\\s*\\}";


            if (File.Exists(readMePath))
            {
                var markdown = File.ReadAllText(readMePath);
                readMeHtml = markdownToHtml(markdown);
            }
            else
            {
                readMeHtml = markdownToHtml($"# {story!}");
            }

            Type? componentType = Type.GetType($"{componentNamespace}.{story}");
            if (componentType == null)
            {
                componentType = Type.GetType($"{componentNamespace}.{story}, {assemblyName}");
            }
            if (componentType != null && xmlDocumentationPath != null)
            {
                string componentComment = getXmlDocumentationCommentForClass(xmlDocumentationPath, componentType);
                readMeHtml += markdownToHtml(componentComment);

                var parameters = getComponentParameters(componentType, xmlDocumentationPath);
                parametersHtml = componentParameterInfoToHtml(parameters);
            }

            var examples = Directory.GetFiles(examplesPath, "*.razor");
            foreach (var example in examples)
            {
                string exampleName = Path.GetFileNameWithoutExtension(example);
                var code = await File.ReadAllTextAsync(example);

                DocsMeta docsMeta = new DocsMeta
                {
                    Title = exampleName,
                    Description = ""
                };

                // Read out meta data from the code
                Match match = Regex.Match(code, docsRegex);

                if (match.Groups.Count > 1)
                {
                    try
                    {
                        var s = JsonSerializer.Deserialize<DocsMeta>(match.Groups[1].Value,
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                        if (s != null)
                        {
                            docsMeta = s;
                        }
                        code = code.Replace(match.Value, "");
                    }
                    catch { }
                }

                code = code.Replace("@", "@@").Replace("<", "&lt;").Replace(">", "&gt;").Trim();

                examplesHtml += $"<h2>{docsMeta.Title}</h2>\n" +
                    (docsMeta.Description != "" ? markdownToHtml(docsMeta.Description ?? "") : "");

                examplesHtml += "<div class=\"example\">\n" +
                    $"    <div class=\"example-demo\"><{exampleName} /></div>\n\n" +
                    $"    <details class=\"example-code\">\n" +
                    $"        <summary>Code</summary>\n" +
                    $"        <pre><code class=\"language-razor\">{code}</code></pre>\n" +
                    $"    </details>\n" +
                    "</div>";
            }

            string content = $"@page \"/stories/{pascalToKebabCase(story!)}\"\n" +
                $"@using BlueBlazor.Docs.Stories.{story}.Examples\n\n" +
                $"\n{readMeHtml}\n" +
                $"\n{parametersHtml}\n" +
                $"\n{examplesHtml}";

            await File.WriteAllTextAsync(pagePath, RazorTemplate.Replace("{0}", content));
        }
    }

    public async Task GeneratePage(string markdownPath, string targetFilePath, string? pageSlug = "/")
    {
        var markdown = await File.ReadAllTextAsync(markdownPath);
        string html = markdownToHtml(markdown);

        string content = $"@page \"{pageSlug}\"\n\n" + html;

        await File.WriteAllTextAsync(targetFilePath, RazorTemplate.Replace("{0}", content));
    }

    IEnumerable<ComponentParameterInfo> getComponentParameters(Type componentType, string xmlDocumentationPath)
    {
        if (componentType == null)
        {
            throw new ArgumentNullException(nameof(componentType));
        }

        var xmlDoc = XDocument.Load(xmlDocumentationPath);
        var memberNodes = xmlDoc.Descendants("member");

        return componentType.GetProperties(BindingFlags.Public | BindingFlags.Instance)
                            .Where(prop => Attribute.IsDefined(prop, typeof(ParameterAttribute)))
                            .Select(prop => new ComponentParameterInfo
                            {
                                Name = prop.Name,
                                ParameterType = prop.PropertyType,
                                DefaultValue = prop.GetValue(Activator.CreateInstance(componentType)) ?? "",
                                Comment = getXmlDocumentationCommentForProp(memberNodes, prop)
                            });
    }

    string componentParameterInfoToHtml(IEnumerable<ComponentParameterInfo> parameter)
    {
        string table = "<table class=\"table table-bordered\">";
        table += "\n    <thead><tr><th>Name</th><th>Description</th><th>Type</th><th>Default</th></tr></thead>";
        table += "\n    <tbody>";

        foreach (var param in parameter)
        {
            table += "\n        <tr>";
            table += $"<td><code>{param.Name}</code></td>";
            table += $"<td>{markdownToHtml(param.Comment ?? "")}</td>";
            table += $"<td>{param.ParameterType?.Name}</td>";
            table += $"<td>{param.DefaultValue}</td>";
            table += "</tr>";
        }

        table += "\n    </tbody>\n";
        table += "</table>";

        return table;
    }

    string getXmlDocumentationCommentForClass(string xmlDocumentationPath, Type classType)
    {
        var xmlDoc = XDocument.Load(xmlDocumentationPath);
        var memberNodes = xmlDoc.Descendants("member");

        var memberName = $"T:{classType.FullName}";
        var memberNode = memberNodes.FirstOrDefault(node => node.Attribute("name")?.Value == memberName);
        return memberNode?.Element("summary")?.Value.Trim() ?? string.Empty;
    }

    string getXmlDocumentationCommentForProp(IEnumerable<XElement> memberNodes, PropertyInfo prop)
    {
        var memberName = $"P:{prop.DeclaringType?.FullName}.{prop.Name}";
        var memberNode = memberNodes.FirstOrDefault(node => node.Attribute("name")?.Value == memberName);
        return memberNode?.Element("summary")?.Value.Trim() ?? string.Empty;
    }

    string markdownToHtml(string markdown)
    {
        return $"<div class=\"md-block\">{Markdig.Markdown.ToHtml(markdown).Replace("@", "@@")}</div>";
    }

    string pascalToKebabCase(string value)
    {
        if (string.IsNullOrEmpty(value))
            return value;

        return Regex.Replace(
            value,
            "(?<!^)([A-Z][a-z]|(?<=[a-z])[A-Z0-9])",
            "-$1",
            RegexOptions.Compiled)
            .Trim()
            .ToLower();
    }
}

public class ComponentParameterInfo
{
    public string? Name { get; set; }
    public Type? ParameterType { get; set; }
    public object? DefaultValue { get; set; }
    public string? Comment { get; set; }
}

public class DocsMeta
{
    public string? Title { get; set; }
    public string? Description { get; set; }
}