@using Microsoft.Extensions.Localization
@inject IStringLocalizer<BlueBlazor.Resources.Phrases> L
@inject IJSRuntime JSRuntime

<label for="@Id-control-1" class="mb-2">
    @Label
</label>

<div class="d-flex gap-1 mb-3 p-3 shadow rounded-pill border">
    <blue-input-splitted id="@Id" light-dom control-1-id="@Id-control-1" length="6" class="d-flex gap-1"
        control-class="form-control form-control-lg text-center" value="@Value"></blue-input-splitted>

    <Button Size="Size.Lg" Class="p-2" title="@L["Clear"]" OnClick="clearInput">
        <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" class="bi bi-backspace"
            viewBox="0 0 16 16">
            <path
                d="M5.83 5.146a.5.5 0 0 0 0 .708L7.975 8l-2.147 2.146a.5.5 0 0 0 .707.708l2.147-2.147 2.146 2.147a.5.5 0 0 0 .707-.708L9.39 8l2.146-2.146a.5.5 0 0 0-.707-.708L8.683 7.293 6.536 5.146a.5.5 0 0 0-.707 0z" />
            <path
                d="M13.683 1a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-7.08a2 2 0 0 1-1.519-.698L.241 8.65a1 1 0 0 1 0-1.302L5.084 1.7A2 2 0 0 1 6.603 1zm-7.08 1a1 1 0 0 0-.76.35L1 8l4.844 5.65a1 1 0 0 0 .759.35h7.08a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1z" />
        </svg>
    </Button>
</div>

@code {
    [Parameter]
    public string Value { get; set; } = "";
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }
    [Parameter]
    public string Label { get; set; } = "";
    [Parameter]
    public string Id { get; set; } = Guid.NewGuid().ToString();
    [Parameter]
    public bool AutoFocus { get; set; } = false;

    [JSInvokable]
    public void OnChangeValue(string value)
    {
        Value = value;
        ValueChanged.InvokeAsync(Value);
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        objRef = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !didInit)
        {
            await JSRuntime.InvokeVoidAsync("blueBlazor.totpInput.init", objRef, Id);
            if (AutoFocus)
            {
                await JSRuntime.InvokeVoidAsync("blueBlazor.totpInput.focus", Id + "-control-1");
            }
            didInit = true;
        }
    }

    DotNetObjectReference<TotpInput>? objRef;
    bool didInit = false;

    async Task clearInput()
    {
        Value = "";
        await ValueChanged.InvokeAsync(Value);
        await JSRuntime.InvokeVoidAsync("blueBlazor.totpInput.setValue", Id, "");
        StateHasChanged();
    }
}