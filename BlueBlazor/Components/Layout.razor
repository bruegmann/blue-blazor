@inject IJSRuntime JSRuntime

<div id="@Id" class="blue-layout @Class @(SidebarIn ? "open" : "") @(HideSidebarMenu ? "hasNoSidebarMenu" : "hasSidebarMenu") @(ExpandSidebar == true ? "expandSidebar" : "") @(DisableHeaders ? "disableHeaders" : "") @(HideToggleExpandSidebar ? "hideToggleExpandSidebar" : "")">
    @if (!HideSidebarMenu)
    {
        <SidebarToggler JsOnClick="blueBlazor.layout.toggleSidebarIn(event)">
            <SidebarToggleIconComponent>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"
                     style="display: inline-block; vertical-align: -0.125em">
                    <path fillRule="evenodd"
                          d="M2.5 12a.5.5 0 01.5-.5h10a.5.5 0 010 1H3a.5.5 0 01-.5-.5zm0-4a.5.5 0 01.5-.5h10a.5.5 0 010 1H3a.5.5 0 01-.5-.5zm0-4a.5.5 0 01.5-.5h10a.5.5 0 010 1H3a.5.5 0 01-.5-.5z">
                    </path>
                </svg>
            </SidebarToggleIconComponent>
        </SidebarToggler>
    }

    @if (!HideSidebarMenu && !HideToggleExpandSidebar)
    {
        <SidebarToggler Class="d-none d-xxl-block"
                        JsOnClick="@($"blueBlazor.layout.toggleExpandSidebar(event, {(UseStorage ? "true" : "false")})")">
            <SidebarToggleIconComponent>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                     viewBox="0 0 16 16" style="display: inline-block; vertical-align: -0.125em">
                    <path fillRule="evenodd"
                          d="M2.5 12a.5.5 0 01.5-.5h10a.5.5 0 010 1H3a.5.5 0 01-.5-.5zm0-4a.5.5 0 01.5-.5h10a.5.5 0 010 1H3a.5.5 0 01-.5-.5zm0-4a.5.5 0 01.5-.5h10a.5.5 0 010 1H3a.5.5 0 01-.5-.5z">
                    </path>
                </svg>
            </SidebarToggleIconComponent>
        </SidebarToggler>
    }

    <div class="blue-outside" style="display: contents">
        @SideContent
    </div>

    @if (PageContent != null)
    {
        <div class="router-page active">
            @PageContent
        </div>
    }

    <script>
        window.blueBlazor = window.blueBlazor || {}

        function findParentWithClass(element, className) {
            while (element && !element.classList.contains(className)) {
                element = element.parentElement
            }
            return element
        }

        function hasClass(el, className) {
            if (el.classList) return el.classList.contains(className)
            else
                return !!el.className.match(
                    new RegExp("(\\s|^)" + className + "(\\s|$)")
                )
        }

        window.blueBlazor.layout = {
            init: (layout) => {
                const ignoreElements = [
                    "blue-open-menu",
                    "bi-menu",
                    "blue-search",
                    "blue-search-control",
                    "blue-search-btn",
                    "blue-search-btn-icon",
                    "blue-menu-item-dropdown-toggle",
                    "blue-menu-item-dropdown-caret",
                    "blue-menu-item-dropdown-icon",
                    "blue-sidebar-exception"
                ]

                if (layout) {
                    const fromStorage = localStorage.getItem("blueLayoutShrinkSidebar")
                    const shrinkSidebar =
                        fromStorage !== "null" && fromStorage !== null ? true : false
                    const expandSidebar = !shrinkSidebar
                    if (expandSidebar) {
                        layout.classList.add("expandSidebar")
                    } else {
                        layout.classList.remove("expandSidebar")
                    }

                    document.addEventListener("click", ({ target }) => {
                        const outsideElement = layout.querySelector(".blue-outside")
                        if (outsideElement) {
                            const isClickInside = outsideElement.contains(target)

                            if (ignoreElements) {
                                for (let i = 0; i < ignoreElements.length; i++) {
                                    if (hasClass(target, ignoreElements[i])) {
                                        return
                                    }
                                }
                            }

                            if (!isClickInside) {
                                layout.classList.remove("open")
                            }
                        }
                    })
                }
            },
            toggleSidebarIn: (event) => {
                const layout = findParentWithClass(event.target, "blue-layout")
                if (layout) {
                    layout.classList.toggle("open")
                }
            },
            toggleExpandSidebar: (event, useStorage = true) => {
                const layout = findParentWithClass(event.target, "blue-layout")
                if (layout) {
                    if (useStorage) {
                        const expandSidebar = layout.classList.contains("expandSidebar")
                        if (expandSidebar) {
                            localStorage.setItem("blueLayoutShrinkSidebar", "true")
                        } else {
                            localStorage.removeItem("blueLayoutShrinkSidebar")
                        }
                    }

                    layout.classList.toggle("expandSidebar")
                }
            },
            unsetSidebarIn: (event) => {
                const layout = findParentWithClass(event.target, "blue-layout")
                if (layout) {
                    layout.classList.remove("open")
                }
            }
        }

        const layout = document.currentScript.closest(".blue-layout")
        blueBlazor.layout.init(layout)
    </script>
</div>


@code {
    [Parameter] public RenderFragment? SideContent { get; set; }
    [Parameter] public RenderFragment? PageContent { get; set; }

    [Parameter] public string Id { get; set; } = "blue-layout-" + Guid.NewGuid().ToString();

    /// <summary>
    /// By default, the side bar is "in". Is two-way bindable.
    /// </summary>
    [Parameter]
    public bool SidebarIn { get; set; }

    [Parameter] public string? Style { get; set; }

    /// <summary>
    /// Set `true` to hide button to toggle `expandSidebar` state.
    /// </summary>
    [Parameter] public bool HideToggleExpandSidebar { get; set; } = false;

    /// <summary>
    /// Sidebar is automatically expanded on wider views. Is two-way bindable.
    /// </summary>
    [Parameter]
    public bool? ExpandSidebar { get; set; }


    /// <summary>
    /// Disables sidebar.
    /// </summary>
    [Parameter] public bool HideSidebarMenu { get; set; } = false;

    [Parameter] public string? Class { get; set; }

    [Parameter] public RenderFragment? SidebarToggleIconComponent { get; set; }

    /// <summary>
    /// Disables the header bars on pages.
    /// </summary>
    [Parameter] public bool DisableHeaders { get; set; }

    /// <summary>
    /// Won't use local storage to set the `expandSidebar` state.
    /// </summary>
    [Parameter] public bool UseStorage { get; set; } = true;
}