@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager

<SidebarMenu>
    <TopContent>
        <MenuItem Label="Home" Href="" IsActive="@isActive("", true)">
            <Icon>
                <BiHouse />
            </Icon>
            <IconForActive>
                <BiHouseFill />
            </IconForActive>
        </MenuItem>
    </TopContent>

    <ChildContent>
        @if (componentPageUrls != null)
        {
            foreach (var item in componentPageUrls)
            {
                <MenuItem Label="@item.Key" Href="@(item.Value + "/props")" IsActive="@isActive(item.Value + "/")">
                    <Icon>
                        @(componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.Icon ?? defaultIcon)
                    </Icon>
                    <IconForActive>
                        @(componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.IconForActive ?? (componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.Icon ?? defaultIcon))
                    </IconForActive>

                    <AfterLabelContent>
                        @if (componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.IsNew == true)
                        {
                            <span class="badge bg-primary ms-1 mt-1">New</span>
                        }
                        @if (componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.IsUpdate == true)
                        {
                            <span class="badge bg-info ms-1 mt-1">Update</span>
                        }
                    </AfterLabelContent>
                </MenuItem>
            }
        }
    </ChildContent>
</SidebarMenu>



@code {
    public void Dispose()
    {
        NavigationManager.LocationChanged -= handleLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += handleLocationChanged;
        await loadPagesData();
    }

    void handleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        StateHasChanged();
    }

    bool isActive(string href, bool exact = false)
    {
        Uri uri = NavigationManager.ToAbsoluteUri(href);
        string uriString = uri.ToString();

        if (exact ? (NavigationManager.Uri == uriString) : (NavigationManager.Uri.StartsWith(uriString)))
        {
            return true;
        }

        return false;
    }

    async Task loadPagesData()
    {
        var json = await Http.GetStringAsync("data/pages-data.json");
        componentPageUrls = JsonSerializer.Deserialize<Dictionary<string, string>>(json);
    }

    Dictionary<string, string>? componentPageUrls;
    Dictionary<string, ComponentIcon> componentIcons = new()
    {
        {"ActionMenu", new() {
            Icon = @<BiMenuButtonWide />,
            IconForActive = @<BiMenuButtonWideFill />}
        },
        {"AlertSection", new() {
            Icon = @<BiExclamationDiamond />,
            IconForActive = @<BiExclamationDiamondFill />}
        },
        {"Button", new() {
            Icon = @<BiPlayBtn />,
            IconForActive = @<BiPlayBtnFill />}
        },
        {"ButtonOrA", new() {
            Icon = @<BiLink45deg />}
        },
        {"Chevron", new() {
            Icon = @<BiChevronRight />}
        },
        {"Heading", new() {
            Icon = @<BiTypeH1 />}
        },
        {"Intro", new() {
            Icon = @<BiPostcard />,
            IconForActive = @<BiPostcardFill />}
        },
        {"Layout", new() {
            Icon = @<BiLayoutTextWindowReverse />}
        },
        {"QrCodeGen", new() {
            Icon = @<BiQrCode />}
        },
        {"MenuItem", new() {
            Icon = @<BiMenuButton />,
            IconForActive = @<BiMenuButtonFill />
        } },
        {"TotpInput", new() {
            Icon = @<BiInputCursorText />}
        },
        {"Tab", new() {
            Icon = @<BiSegmentedNav />}
        },
        {"Tabs", new() {
            Icon = @<BiSegmentedNav />}
        },
        {"SimpleLayout", new() {
            Icon = @<BiWindow /> }
        },
        {"InlineEdit", new() {
            Icon = @<BiCursorText /> }
        },
        {"TuiEditor", new() {
            Icon = @<BiPencilSquare />, IsNew = true }
        },
        {"Modal", new() {
            Icon = @<BiWindowStack />, IsNew = true }
        },
        {"Offcanvas", new() {
            Icon = @<BiLayoutSidebarInset />, IsNew = true }
        } };
    RenderFragment defaultIcon = @<BiFileCode />;

    class ComponentIcon
    {
        public RenderFragment Icon { get; set; } = @<BiFileCode />;
        public RenderFragment? IconForActive { get; set; }
        public bool IsNew { get; set; } = false;
        public bool IsUpdate { get; set; } = false;
    }
}