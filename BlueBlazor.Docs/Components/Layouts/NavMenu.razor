@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager


<ul class="list-unstyled d-flex flex-column">
    <li>
        <MenuItem Label="Home" Href="" IsActive="@isActive("", true)">
        <Icon>
            <BiHouse />
        </Icon>
        <IconForActive>
            <BiHouseFill />
        </IconForActive>
        </MenuItem>
    </li>

    <li class="mt-3">
        <strong class="ps-2">Components</strong>
        <ul class="list-unstyled">
            @if (componentPageUrls != null)
            {
                @foreach (var group in componentPageUrls)
                {
                    @foreach (var item in group.Value.Where(i => i.Key == group.Key))
                    {
                        <li>
                            <MenuItem Label="@item.Key" Href="@(item.Value + "/")" IsActive="@isActive(item.Value + "/")">
                            <Icon>
                                @(componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.Icon ?? defaultIcon)
                            </Icon>
                            <IconForActive>
                                @(componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.IconForActive ??
                                                    (componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.Icon ?? defaultIcon))
                            </IconForActive>

                            <AfterLabelContent>
                                @if (componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.IsNew == true)
                                {
                                    <span class="badge bg-primary ms-1 mt-1">New</span>
                                }
                                @if (componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.IsUpdate == true)
                                {
                                    <span class="badge bg-info ms-1 mt-1">Update</span>
                                }
                                @if (componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.IsExperimental == true)
                                {
                                    <span class="badge bg-warning ms-1 mt-1">Experimental</span>
                                }
                            </AfterLabelContent>
                            </MenuItem>
                        </li>
                    }

                    @foreach (var item in group.Value.Where(i => i.Key != group.Key))
                    {
                        <li class="ms-3 border-start">
                            <MenuItem Label="@item.Key" Href="@(item.Value + "/")" IsActive="@isActive(item.Value + "/")">
                            <Icon>
                                @(componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.Icon ?? defaultIcon)
                            </Icon>
                            <IconForActive>
                                @(componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.IconForActive ??
                                                    (componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.Icon ?? defaultIcon))
                            </IconForActive>

                            <AfterLabelContent>
                                @if (componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.IsNew == true)
                                {
                                    <span class="badge bg-primary ms-1 mt-1">New</span>
                                }
                                @if (componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.IsUpdate == true)
                                {
                                    <span class="badge bg-info ms-1 mt-1">Update</span>
                                }
                                @if (componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.IsExperimental == true)
                                {
                                    <span class="badge bg-warning ms-1 mt-1">Experimental</span>
                                }
                            </AfterLabelContent>
                            </MenuItem>
                        </li>
                    }
                }
            }
        </ul>
    </li>

    <li class="mt-3">
        <strong class="ps-2">Resources for AI agents</strong>
        <ul class="list-unstyled">
            <li>
                <MenuItem Href="llms.txt" Label="llms.txt">
                <Icon>
                    <BiBodyText />
                </Icon>
                </MenuItem>
            </li>
        </ul>
    </li>
</ul>



@code {
    public void Dispose()
    {
        NavigationManager.LocationChanged -= handleLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += handleLocationChanged;
        await loadPagesData();
    }

    void handleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        StateHasChanged();
    }

    bool isActive(string href, bool exact = false)
    {
        Uri uri = NavigationManager.ToAbsoluteUri(href);
        string uriString = uri.ToString();

        if (exact ? (NavigationManager.Uri == uriString) : (NavigationManager.Uri.StartsWith(uriString)))
        {
            return true;
        }

        return false;
    }

    async Task loadPagesData()
    {
        var json = await Http.GetStringAsync("data/pages-data.json?v=7");
        componentPageUrls = JsonSerializer.Deserialize<Dictionary<string, Dictionary<string, string>>>(json);
    }

    Dictionary<string, Dictionary<string, string>>? componentPageUrls;
    Dictionary<string, ComponentIcon> componentIcons = new()
{
{"Action menu", new() {
Icon = @<BiMenuButtonWide />,
IconForActive = @<BiMenuButtonWideFill />}
},
{"Alert section", new() {
Icon = @<BiExclamationDiamond />,
IconForActive = @<BiExclamationDiamondFill />}
},
{"Button", new() {
Icon = @<BiPlayBtn />,
IconForActive = @<BiPlayBtnFill />}
},
{"Button or a", new() {
Icon = @<BiLink45deg />}
},
{"Chevron", new() {
Icon = @<BiChevronRight />}
},
{"Heading", new() {
Icon = @<BiTypeH1 />}
},
{"Intro", new() {
Icon = @<BiPostcard />,
IconForActive = @<BiPostcardFill />, IsUpdate = true}
},
{"Layout", new() {
Icon = @<BiLayoutTextWindowReverse />}
},
{"Qr code gen", new() {
Icon = @<BiQrCode />}
},
{"Menu item", new() {
Icon = @<BiApp />
} },
{"Totp input", new() {
Icon = @<BiInputCursorText />}
},
{"Tab", new() {
Icon = @<BiSegmentedNav />}
},
{"Tabs", new() {
Icon = @<BiSegmentedNav />}
},
{"Simple layout", new() {
Icon = @<BiWindow /> }
},
{"Inline edit", new() {
Icon = @<BiCursorText /> }
},
{"Tui editor", new() {
Icon = @<BiPencilSquare /> }
},
{"Modal dialog", new() {
Icon = @<BiWindowStack /> }
},
{"Offcanvas dialog", new() {
Icon = @<BiLayoutSidebarInset /> }
},
{"Dialog opener", new() {
Icon = @<BiArrowUpRightSquare /> }
},
{"Dialog provider", new() {
Icon = @<BiSquare /> }
},
{"Actions", new() {
Icon = @<BiMenuApp />, IsExperimental = true }
},
{"Collapse", new() {
Icon = @<BiCardHeading />, IsUpdate = true }
},
{"Dropdown", new() {
Icon = @<BiMenuDown /> }
},
{"Text input", new() {
Icon = @<BiInputCursor />, IsUpdate = true }
},
{"Tooltip", new() {
Icon = @<BiChatSquareText /> }
},
{"Create id", new() {
Icon = @<BiBracesAsterisk /> }
},
{"Field groups", new() {
Icon = @<BiListOl />, IsNew = true }
},
{"Field group", new() {
Icon = @<BiCardHeading />, IsNew = true }
},
{"Odometer", new() {
Icon = @<Bi9Square />, IsNew = true }
} };
RenderFragment defaultIcon = @<BiFileCode />;

class ComponentIcon
    {
        public RenderFragment Icon { get; set; } = @<BiFileCode />;
        public RenderFragment? IconForActive { get; set; }
        public bool IsNew { get; set; } = false;
        public bool IsUpdate { get; set; } = false;
        public bool IsExperimental { get; set; } = false;
    }
}