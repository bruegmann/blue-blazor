@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager

<SidebarMenu>
    <TopContent>
        <MenuItem Label="Home" Href="" IsActive="@isActive("")">
            <Icon>
                <BiHouse />
            </Icon>
            <IconForActive>
                <BiHouseFill />
            </IconForActive>
        </MenuItem>
    </TopContent>
    <ChildContent>
        @if (componentPageUrls != null)
        {
            foreach (var item in componentPageUrls)
            {
                <MenuItem Label="@item.Key" Href="@item.Value" IsActive="@isActive(item.Value)">
                    <Icon>
                        @(componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.Icon ?? defaultIcon)
                    </Icon>
                    <IconForActive>
                        @(componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.IconForActive ?? (componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.Icon ?? defaultIcon))
                    </IconForActive>
                </MenuItem>
            }
        }
    </ChildContent>

    <BottomContent>
        <MenuItem Label="Code on GitHub" Href="https://github.com/bruegmann/blue-blazor" Target="_blank">
            <Icon>
                <BiCodeSquare />
            </Icon>
        </MenuItem>
    </BottomContent>
</SidebarMenu>

@code {
    public void Dispose()
    {
        NavigationManager.LocationChanged -= handleLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += handleLocationChanged;
        await loadPagesData();
    }

    void handleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        StateHasChanged();
    }

    bool isActive(string href)
    {
        var uri = NavigationManager.ToAbsoluteUri(href);

        if (NavigationManager.Uri == uri.ToString())
        {
            return true;
        }

        return false;
    }

    async Task loadPagesData()
    {
        var json = await Http.GetStringAsync("data/pages-data.json");
        componentPageUrls = JsonSerializer.Deserialize<Dictionary<string, string>>(json);
    }

    Dictionary<string, string>? componentPageUrls;
    Dictionary<string, ComponentIcon> componentIcons = new()
    {
        {"ActionMenu", new() {
            Icon = @<BiMenuButtonWide />,
            IconForActive = @<BiMenuButtonWideFill />}
        },
        {"AlertSection", new() {
            Icon = @<BiExclamationDiamond />,
            IconForActive = @<BiExclamationDiamondFill />}
        },
        {"Button", new() {
            Icon = @<BiPlayBtn />,
            IconForActive = @<BiPlayBtnFill />}
        },
        {"ButtonOrA", new() {
            Icon = @<BiLink45deg />}
        },
        {"Chevron", new() {
            Icon = @<BiChevronRight />}
        },
        {"Heading", new() {
            Icon = @<BiTypeH1 />}
        },
        {"Intro", new() {
            Icon = @<BiPostcard />,
            IconForActive = @<BiPostcardFill />}
        },
        {"Layout", new() {
            Icon = @<BiLayoutTextWindowReverse />}
        },
        {"QrCodeGen", new() {
            Icon = @<BiQrCode />}
        }};
    RenderFragment defaultIcon = @<BiFileCode />;

    class ComponentIcon
    {
        public RenderFragment Icon { get; set; } = @<BiFileCode />;
        public RenderFragment? IconForActive { get; set; }
    }
}