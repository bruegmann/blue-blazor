@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager

<SidebarMenu>
    <ul class="list-unstyled d-flex flex-column">
        <li>
            <MenuItem Label="Home" Href="" IsActive="@isActive("", true)">
                <Icon>
                    <BiHouse />
                </Icon>
                <IconForActive>
                    <BiHouseFill />
                </IconForActive>
            </MenuItem>
        </li>

        <li class="mb-3">
            <div class="blue-collapse-group" role="group">
                <MenuItem Label="Dialogs" Href="topics/dialogs" IsActive="@isActive("topics/dialogs")">
                    <Icon>
                        <BiWindowStack />
                    </Icon>
                </MenuItem>

                <Collapse Label="Click to open" LabelClass="visually-hidden" DropdownClass="d-flex flex-column border-start position-relative ms-3">
                    @if (componentPageUrls != null)
                    {
                        foreach (var item in componentPageUrls.Where((kv) => kv.Key.ToLower().Contains("dialog")))
                        {
                            <MenuItem Label="@item.Key" Href="@(item.Value + "/props")" IsActive="@isActive(item.Value + "/")">
                                <Icon>
                                    @(componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.Icon ?? defaultIcon)
                                </Icon>
                                <IconForActive>
                                    @(componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.IconForActive ??
                                        (componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.Icon ?? defaultIcon))
                                </IconForActive>

                                <AfterLabelContent>
                                    @if (componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.IsNew == true)
                                    {
                                        <span class="badge bg-primary ms-1 mt-1">New</span>
                                    }
                                    @if (componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.IsUpdate == true)
                                    {
                                        <span class="badge bg-info ms-1 mt-1">Update</span>
                                    }
                                    @if (componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.IsExperimental == true)
                                    {
                                        <span class="badge bg-warning ms-1 mt-1">Experimental</span>
                                    }
                                </AfterLabelContent>
                            </MenuItem>
                        }
                    }
                </Collapse>
            </div>
        </li>

        <li class="mb-3">
            <strong class="ps-2">Components</strong>
            <ul class="list-unstyled">
                @if (componentPageUrls != null)
                {
                    foreach (var item in componentPageUrls.Where((kv) => !kv.Key.ToLower().Contains("dialog")))
                    {
                        <li>
                            <MenuItem Label="@item.Key" Href="@(item.Value + "/props")" IsActive="@isActive(item.Value + "/")">
                                <Icon>
                                    @(componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.Icon ?? defaultIcon)
                                </Icon>
                                <IconForActive>
                                    @(componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.IconForActive ??
                                        (componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.Icon ?? defaultIcon))
                                </IconForActive>

                                <AfterLabelContent>
                                    @if (componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.IsNew == true)
                                    {
                                        <span class="badge bg-primary ms-1 mt-1">New</span>
                                    }
                                    @if (componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.IsUpdate == true)
                                    {
                                        <span class="badge bg-info ms-1 mt-1">Update</span>
                                    }
                                    @if (componentIcons.Where(x => x.Key == item.Key).FirstOrDefault().Value?.IsExperimental == true)
                                    {
                                        <span class="badge bg-warning ms-1 mt-1">Experimental</span>
                                    }
                                </AfterLabelContent>
                            </MenuItem>
                        </li>
                    }
                }
            </ul>
        </li>

        <li>
            <strong class="ps-2">Resources for AI agents</strong>
            <ul class="list-unstyled">
                <li>
                    <MenuItem Href="llms.txt" Label="llms.txt">
                        <Icon><BiBodyText /></Icon>
                    </MenuItem>
                </li>
            </ul>
        </li>
    </ul>
</SidebarMenu>



@code {
    public void Dispose()
    {
        NavigationManager.LocationChanged -= handleLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += handleLocationChanged;
        await loadPagesData();
    }

    void handleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        StateHasChanged();
    }

    bool isActive(string href, bool exact = false)
    {
        Uri uri = NavigationManager.ToAbsoluteUri(href);
        string uriString = uri.ToString();

        if (exact ? (NavigationManager.Uri == uriString) : (NavigationManager.Uri.StartsWith(uriString)))
        {
            return true;
        }

        return false;
    }

    async Task loadPagesData()
    {
        var json = await Http.GetStringAsync("data/pages-data.json?v=2");
        componentPageUrls = JsonSerializer.Deserialize<Dictionary<string, string>>(json);
    }

    Dictionary<string, string>? componentPageUrls;
    Dictionary<string, ComponentIcon> componentIcons = new()
{
{"ActionMenu", new() {
Icon = @<BiMenuButtonWide />,
IconForActive = @<BiMenuButtonWideFill />}
},
{"AlertSection", new() {
Icon = @<BiExclamationDiamond />,
IconForActive = @<BiExclamationDiamondFill />}
},
{"Button", new() {
Icon = @<BiPlayBtn />,
IconForActive = @<BiPlayBtnFill />, IsUpdate = true}
},
{"ButtonOrA", new() {
Icon = @<BiLink45deg />}
},
{"Chevron", new() {
Icon = @<BiChevronRight />}
},
{"Heading", new() {
Icon = @<BiTypeH1 />}
},
{"Intro", new() {
Icon = @<BiPostcard />,
IconForActive = @<BiPostcardFill />}
},
{"Layout", new() {
Icon = @<BiLayoutTextWindowReverse />}
},
{"QrCodeGen", new() {
Icon = @<BiQrCode />}
},
{"MenuItem", new() {
Icon = @<BiApp />
} },
{"TotpInput", new() {
Icon = @<BiInputCursorText />}
},
{"Tab", new() {
Icon = @<BiSegmentedNav />}
},
{"Tabs", new() {
Icon = @<BiSegmentedNav />}
},
{"SimpleLayout", new() {
Icon = @<BiWindow /> }
},
{"InlineEdit", new() {
Icon = @<BiCursorText /> }
},
{"TuiEditor", new() {
Icon = @<BiPencilSquare /> }
},
{"ModalDialog", new() {
Icon = @<BiWindowStack /> }
},
{"OffcanvasDialog", new() {
Icon = @<BiLayoutSidebarInset /> }
},
{"DialogOpener", new() {
Icon = @<BiArrowUpRightSquare /> }
},
{"DialogProvider", new() {
Icon = @<BiSquare /> }
},
{"Actions", new() {
Icon = @<BiMenuApp />, IsExperimental = true }
},
{"Collapse", new() {
Icon = @<BiCardHeading /> }
},
{"Dropdown", new() {
Icon = @<BiMenuDown /> }
} };
    RenderFragment defaultIcon = @<BiFileCode />;

    class ComponentIcon
    {
        public RenderFragment Icon { get; set; } = @<BiFileCode />;
        public RenderFragment? IconForActive { get; set; }
        public bool IsNew { get; set; } = false;
        public bool IsUpdate { get; set; } = false;
        public bool IsExperimental { get; set; } = false;
    }
}